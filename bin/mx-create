#!/usr/bin/env bash

_parse_arguments() {
    local arg
    local arg_idx
    arg_idx=0
    while (($# > 0)); do
        arg="$1"
        case "$arg" in
        --no-focus)
            _focus="no"
            ;;
        --pwd=*)
            _pwd=$(echo "$arg" | cut -d '=' -f2)
            ;;
        --pwd)
            _pwd=$2
            shift
            ;;
        --* | -*)
            shift
            ;;
        *)
            _try_mx_command "$arg" "$@"
            arg_idx=$((arg_idx + 1))
            [[ $arg_idx -eq 1 ]] && _namespace="${arg}"
            [[ $arg_idx -eq 2 ]] && _project_name="${arg}"
            ;;
        esac
        shift
    done
    return 0
}

e_line() {
    printf "${4}%b${RESET}${2}%b${RESET}\n" "${3}" "${1}"
}

e_info() {
    LOG_STATUS_INFO="${LOG_STATUS_INFO:-→}"
    e_line "$1" "" "${LOG_STATUS_INFO} " "${BLUE}"
}

__usage() {
  local reason;
  reason="${1:-}"
  case "$reason" in
    namespace|project) 
      echo "USAGE: mx create namespace project"
      echo "Error: $reason is empty"
    ;;
    *)
      echo "USAGE: mx create namespace project"
    ;;
  esac
  
}

_mx_create() {
    if [[ -z "${PROJECTS:-}" ]]; then
      e_info 'mx-create requires the $PROJECT variable to be set'
      e_line 'The variable should point to where the PROJECTS will be created:'
      e_line 'export PROJECTS="${HOME}/projects"'
      exit 1
    fi
    local namespace project
    namespace="${1:-}"
    project="${2:-}"
    if [[ -z ${namespace} ]]; then
      __usage "namespace"
      exit 1
    fi
    if [[ -z ${project} ]]; then
      __usage "project"
      exit 1
    fi
    
    if [ -d "${PROJECTS}/${namespace}/${project}" ]; then
      e_info "Project already exists, opening it…"
    else
      mkdir -p "${PROJECTS}"
      e_info "Creating the project ${namespace}/${project}"
      command mkdir -p ${PROJECTS}/${namespace}/${project}
    fi

    exec "mx" "$namespace" "$project"
}

_mx_create "$@"

