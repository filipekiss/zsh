#!/usr/bin/env bash

_parse_arguments() {
    local arg
    local arg_idx
    arg_idx=0
    while (($# > 0)); do
        arg="$1"
        case "$arg" in
        --no-focus)
            _focus="no"
            ;;
        --pwd=*)
            _pwd=$(echo "$arg" | cut -d '=' -f2)
            ;;
        --pwd)
            _pwd=$2
            shift
            ;;
        --* | -*)
            shift
            ;;
        *)
            arg_idx=$((arg_idx + 1))
            [[ $arg_idx -eq 1 ]] && _namespace_or_url="${arg}"
            [[ $arg_idx -eq 2 ]] && _project_name="${arg}"
						[[ $arg_idx -eq 3 ]] && _repository_url="${arg}"
            ;;
        esac
        shift
    done
    return 0
}

e_line() {
    printf "${4}%b${RESET}${2}%b${RESET}\n" "${3}" "${1}"
}

e_info() {
    LOG_STATUS_INFO="${LOG_STATUS_INFO:-→}"
    e_line "$1" "" "${LOG_STATUS_INFO} " "${BLUE}"
}

e_error() {
    LOG_STATUS_ERROR="${LOG_STATUS_ERROR:-⛔️}"
    e_line "$1" "" "${LOG_STATUS_ERROR} " "${RED}"
}

__usage() {
  local reason;
  reason="${1:-}"
  case "$reason" in
		url)
			e_error "Tried to guess repository from ${_namespace_or_url} but the URL seems invalid."
			;;
    namespace|project) 
      e_error "Error: $reason is empty"
      echo "USAGE: mx clone namespace project [url]"
    ;;
		projects_variable)
      e_info 'mx-clone requires the $PROJECT variable to be set'
      e_line 'The variable should point to where the PROJECTS will be cloned:'
      e_line 'export PROJECTS="${HOME}/projects"'
			;;
    *)
      echo "USAGE: mx clone namespace project [url]"
    ;;
  esac
  
}

_build_github_url() {
	local org="$1"
	local repo="$2"
	[[ -z $org || -z $repo ]] && return 1
	_repository_url="git@github.com:${org}/${repo}"
}

_parse_domain_from_url() {
  local url=$1

  # Check if the URL starts with "https://", "http://", or "git@"
  if [[ $url == https://* || $url == http://* ]]; then
    # Remove "https://" or "http://" from the beginning of the URL
    local stripped_url=${url#*//}
  else
    # Remove "git@" from the beginning of the URL
    local stripped_url=${url#*@}
    # Extract the domain (everything between '@' and ':')
    local domain=${stripped_url%%:*}
    echo $domain
    return
  fi

  # Extract the domain (everything between the first '/' and the next '/')
  local domain=${stripped_url%%/*}

  echo $domain
}

_parse_namespace_from_url() {
  local url=$1
	local domain=${2:-github.com}

  # Remove "https://" or "git@" from the beginning of the URL
  local stripped_url=${url#*${domain}/}

  # Check if the URL format is git@github.com:<namespace>/<project>
  if [[ $stripped_url == *":"* ]]; then
    # Remove the namespace part from the URL (including ':')
    local stripped_namespace=${stripped_url#*:}
    
    # Extract the namespace (everything before '/')
    local namespace=${stripped_namespace%%/*}
  else
    # Extract the namespace (everything before '/')
    local namespace=${stripped_url%%/*}
  fi

  echo $namespace
}

_parse_project_from_url() {
  local url=$1

	local domain=${2:-github.com}

  # Remove "https://" or "git@" from the beginning of the URL
  local stripped_url=${url#*${domain}/}
  # Remove "https://" or "git@" from the beginning of the URL
  local stripped_url=${url#*github.com/}

  # Check if the URL format is git@github.com:<namespace>/<project>
  if [[ $stripped_url == *":"* ]]; then
    # Remove the namespace part from the URL (including ':')
    local stripped_namespace=${stripped_url#*:}
  else
    # Remove the namespace part from the URL
    local stripped_namespace=${stripped_url#*/}
  fi

  # Remove the ".git" extension from the project name if present
  local project=${stripped_namespace%%.git*}

  # Remove the namespace part from the project name if present
  project=${project##*/}

  echo $project
}

_mx_clone() {
    if [[ -z "${PROJECTS:-}" ]]; then
			__usage "projects_variable"
			exit 1
    fi
		_parse_arguments "$@"
    local namespace project
		if [[ -n "${_namespace_or_url}" && -z "${_project_name}" && -z "${_repository_url}" ]]; then
			local _domain=$(_parse_domain_from_url ${_namespace_or_url})
			local _namespace=$(_parse_namespace_from_url ${_namespace_or_url} ${_domain})
			local _project=$(_parse_project_from_url ${_namespace_or_url} ${_domain})
			if [[ -z ${_domain} || -z ${_namespace} || -z ${_project} ]]; then
				__usage "url"
				exit 1
			fi
			namespace=$_namespace
			project=$_project
			_repository_url=$_namespace_or_url
		fi
    namespace="${namespace:-${_namespace_or_url}}"
    project="${project:-${_project_name}}"
    if [[ -z ${namespace} ]]; then
      __usage "namespace"
      exit 1
    fi
    if [[ -z ${project} ]]; then
      __usage "project"
      exit 1
    fi

    if [ -d "${PROJECTS}/${namespace}/${project}" ]; then
      e_error "Project already exists, refusing to clone"
			e_line "Use ${BLUE}mx ${namespace} ${project}$RESET to open it"
			exit 1
    else
			# if url is empty, assume it's github and build it
			if [[ -z ${_repository_url:-} ]]; then
				_build_github_url ${namespace} ${project}
			fi
			e_info "Cloning ${namespace}/${project} ($_repository_url)"
			command git clone ${_repository_url} ${PROJECTS}/${namespace}/${project}
			_clone_status=$?
			[[ ${_clone_status} -eq 0 ]] && exec "mx" "$namespace" "$project" && exit 0
			e_error "Something went wrong during clone. Check the output above."
    fi

}

_mx_clone "$@"

